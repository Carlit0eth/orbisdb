export default class ChatGPTPlugin {
  constructor({ organization_id, secret_key, model, prompt, updatedVariable }) {
    this.organization_id = organization_id;
    this.secret_key = secret_key;
    this.model = model;
    this.prompt = prompt;
    this.updatedVariable = updatedVariable;
  }

  async init() {
    return {
      HOOKS: {
        "update": (stream) => this.query(stream),
        "add_metadata": (stream) => this.classify(stream),
      },
    };
  }

    /** Will query ChatGPT based on the plugin settings */ 
    async query(content) {
        // Parse the prompt string and replace placeholders with actual values
        const parsedPrompt = this.prompt.replace(/\$\{(\w+)\}/g, (_, variableName) => content[variableName]);
        console.log("parsedPrompt:", parsedPrompt);
        
        // Fetch the API
        const response = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
            "Content-Type": "application/json",
            'Authorization': `Bearer ${this.secret_key}`,
            'OpenAI-Organization': this.organization_id
        },
        body: JSON.stringify({
            model: "gpt-3.5-turbo",
            messages: [
            {
                "role": "system",
                "content": "You are a helpful assistant."
            },
            {
                "role": "user",
                "content": parsedPrompt
            }
            ]
        })
        });
    
        if (!response.ok) {
        console.error("Error with ChatGPTPlugin  " + response.statusText + ": ", response.status);
        return;
        }
    
        const data = await response.json();
        console.log("AI response: ", data.choices[0].message.content);

        /** Will update the stream's content to add the description generated by GPT */
        let _content = {...content};
        _content[this.updatedVariable] = data.choices[0].message.content;
        return _content
    }

    /** Will return a JSON object classifying the book */
    async classify(stream) {
        console.log("Enter classify with stream:", stream);
        console.log("will classify the the content in different categories.");
        const response = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
            "Content-Type": "application/json",
            'Authorization': `Bearer ${this.secret_key}`,
            'OpenAI-Organization': this.organization_id
        },
        body: JSON.stringify({
            model: "gpt-3.5-turbo-1106",
            response_format: { "type": "json_object" },
            messages: [
                {
                    "role": "system",
                    "content": "You are a helpful assistant."
                },
                {
                    "role": "user",
                    "content": "Can you return a JSON object classifying this book in mutiple categories while evaluating the target readers for this book? The json object should have two keys: categories (array of string) and readers (array of string):" + stream.content.Title + " by " + stream.content.Author
                }
            ]
        })
        });
    
        if (!response.ok) {
        console.error("Error with ChatGPTPlugin  " + response.statusText + ": ", response.status);
        return;
        }
    
        const data = await response.json();
        console.log("AI response: ", data.choices[0].message.content);

        /** Will return the classification of the book  */
        return data.choices[0].message.content;
    }
}