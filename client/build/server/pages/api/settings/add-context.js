"use strict";(()=>{var e={};e.id=857,e.ids=[857],e.modules={145:e=>{e.exports=require("next/dist/compiled/next-server/pages-api.runtime.prod.js")},6705:e=>{e.exports=import("formidable")},7147:e=>{e.exports=require("fs")},1017:e=>{e.exports=require("path")},622:(e,t,o)=>{o.a(e,async(e,n)=>{try{o.r(t),o.d(t,{config:()=>c,default:()=>d,routeModule:()=>u});var s=o(9762),r=o(6059),l=o(4718),i=o(4063),a=e([i]);i=(a.then?(await a)():a)[0];let d=(0,l.l)(i,"default"),c=(0,l.l)(i,"config"),u=new s.PagesAPIRouteModule({definition:{kind:r.x.PAGES_API,page:"/api/settings/add-context",pathname:"/api/settings/add-context",bundlePath:"",filename:""},userland:i});n()}catch(e){n(e)}})},4063:(e,t,o)=>{o.a(e,async(e,n)=>{try{o.r(t),o.d(t,{config:()=>c,default:()=>handler});var s=o(6705),r=o(7147),l=o.n(r),i=o(1017),a=o.n(i),d=e([s]);s=(d.then?(await d)():d)[0];let c={api:{bodyParser:!1}},u=a().resolve(process.cwd(),"orbisdb-settings.json");async function handler(e,t){let o;if(!l().existsSync(u))throw Error("Settings file does not exist");let n=JSON.parse(l().readFileSync(u,"utf8"));if(console.log("Enter add-context handler."),"POST"===e.method){let r=new s.IncomingForm;r.uploadDir=a().join(process.cwd(),"client","public","uploads"),console.log("form.uploadDir:",r.uploadDir),r.keepExtensions=!0,r.parse(e,(e,s,i)=>{try{if(e){t.status(500).json({error:"There was an error processing your upload"});return}if(i?.file){let e=i.file[0];console.log("file:",e),console.log("fields:",s),console.log("file.filepath:",e.filepath);let t=e.originalFilename,n=a().extname(t),d=a().basename(e.newFilename),c=d+n;console.log("filename:",c),console.log("fileExtension:",n);let u=a().join(r.uploadDir,c);console.log("_path:",u),l().renameSync(e.filepath,u),o=`/uploads/${c}`}}catch(e){console.log("Error uploading logo:",e)}console.log("logoPath:",o);let{context:d}=s;d=JSON.parse(d),o&&(d.logo=o),console.log("context:",d);try{if(d.context){let e=findContextById(d.context,n.contexts);if(e)e.contexts||(e.contexts=[]),console.log("parentOrExistingContext:",e),e.stream_id===d.context&&console.log("It's a sub-context, update it."),updateContext(e.contexts,d);else throw Error(`Parent context not found for: ${d.context}`)}else updateContext(n.contexts,d);console.log("Updated settings:",n),l().writeFileSync(u,JSON.stringify(n,null,2)),t.status(200).json({status:200,settings:n,context:d,result:"Context updated in the settings file."})}catch(e){console.error(e),t.status(500).json({error:"Failed to update settings."})}})}else t.status(405).json({error:`Method '${e.method}' Not Allowed`})}let findContextById=(e,t)=>{for(let o of t){if(o.stream_id===e)return o;if(o.contexts){let t=findContextById(e,o.contexts);if(t)return t}}return null},updateContext=(e,t)=>{let o=e.findIndex(e=>e.stream_id===t.stream_id);-1!==o?e[o]={...e[o],...t}:e.push(t)};n()}catch(e){n(e)}})}};var t=require("../../../webpack-api-runtime.js");t.C(e);var __webpack_exec__=e=>t(t.s=e),o=t.X(0,[836],()=>__webpack_exec__(622));module.exports=o})();