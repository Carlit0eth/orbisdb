"use strict";(()=>{var e={};e.id=428,e.ids=[428],e.modules={145:e=>{e.exports=require("next/dist/compiled/next-server/pages-api.runtime.prod.js")},7147:e=>{e.exports=require("fs")},1017:e=>{e.exports=require("path")},9186:(e,t,s)=>{s.r(t),s.d(t,{config:()=>f,default:()=>c,routeModule:()=>m});var r={};s.r(r),s.d(r,{default:()=>handler});var o=s(9762),i=s(6059),d=s(4718),n=s(7147),a=s.n(n),l=s(1017),u=s.n(l);let p=u().resolve(process.cwd(),"orbisdb-settings.json");async function handler(e,t){if("POST"===e.method){let{modelId:s}=e.body;try{if(!a().existsSync(p))throw Error("Settings file does not exist");let e=JSON.parse(a().readFileSync(p,"utf8")),r=e.models.findIndex(e=>e.stream_id===s);if(-1===r){t.status(404).json({error:`Model with stream_id ${targetStreamId} not found`});return}e.models[r].status=2,console.log("New settings:",e),a().writeFileSync(p,JSON.stringify(e,null,2)),t.status(200).json({status:200,settings:e,result:"Model status updated"})}catch(e){console.error(e),t.status(500).json({error:"Failed to update settings."})}}else t.status(405).json({error:`Method '${e.method}' Not Allowed`})}let c=(0,d.l)(r,"default"),f=(0,d.l)(r,"config"),m=new o.PagesAPIRouteModule({definition:{kind:i.x.PAGES_API,page:"/api/settings/index-model",pathname:"/api/settings/index-model",bundlePath:"",filename:""},userland:r})}};var t=require("../../../webpack-api-runtime.js");t.C(e);var __webpack_exec__=e=>t(t.s=e),s=t.X(0,[836],()=>__webpack_exec__(9186));module.exports=s})();